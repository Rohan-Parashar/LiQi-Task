# -*- coding: utf-8 -*-
"""LiQi.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z3iaBdRhsJ6e82A0p_OKTeu9bcvxRSDL
"""

# importing relevant libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from bs4 import BeautifulSoup
! pip install pandas_read_xml
import pandas_read_xml as pdx
from pandas_read_xml import flatten

current_acc_transactions = pd.read_csv("/content/sample_data/Transazioni_Azienda ABC - Foglio1.csv")

# checking data quality 

# data size
print(current_acc_transactions.shape) 
# random samples
print(current_acc_transactions.sample(5))
# null values, datatype
current_acc_transactions.info()
# duplicate values
current_acc_transactions.duplicated().sum()

# Converting object data type to suitable data types
df= current_acc_transactions.convert_dtypes()

# amount column string to float
for i in range(0,115):
    df['amount'][i]=df['amount'][i].replace('â‚¬','')
    df['amount'][i]=df['amount'][i].replace('.','')
    df['amount'][i]=df['amount'][i].replace(',','.')
    df['amount'][i]=df['amount'][i].replace(' ','')

df['amount']= df['amount'].convert_dtypes()
df['amount'] = pd.to_numeric(df['amount'], downcast='signed') # works
df['amount']

# 'data' column to datetime 
df['data ']=pd.to_datetime(df['data '])

# Visualising the different categories of transactions
(df['categoria'].value_counts().plot(kind='pie', autopct="%.2f"))

# Visualising the spread of transactions 
plt.hist(df['data '], bins=12)

# Visualising the data using scatterplot
plt.figure(figsize=(12,12))
sns.scatterplot(df['amount'], df['data '], hue=df['categoria'])

# Plotting the distribution of transaction amount
sns.boxplot(df['amount'])

# Visualising the transaction distribution 
sns.distplot(df['amount'])

# Analysing the transaction amount
print('Maximum amount paid / expenditure or liabilities: ', df['amount'].min())
print('Maximum amount received / revenue or receipts: ', df['amount'].max())
print('average amount in any transaction: ', df['amount'].mean())
print('Median of all the transactions: ', df['amount'].median())
print('Net payment done / revenue recieved: ',df['amount'].sum())

df['amount'].describe()

# Further analysing the values in amount column

print((df['amount'] > 0).value_counts())  # Roughly 36.5 % of the transactions are +ve and rest are paid off / liabilities.

print(df['amount'].sum()) # Net transaction amount is +ve, slightly over 7,500 Euros.


# Total amount receipts / received
df_receipts = df.loc[df['amount'] > 0]
print('Total amount receipts/received: ', df_receipts.sum())

# Amount received from the main source of revenue receipts 
df_2 = df.loc[df['categoria'] == 'INCASSO FATTURA', 'amount']
print('Amount received from the main source of revenue receipts: ', df_2.sum())

# Funding Distribution, second highest contributor in the receipts after invoice collection  
print('Funding Distribution, second highest contributor in the receipts: ', df.loc[df['categoria'] == 'EROGAZIONE FINANZIAMENTO', 'amount'])

# Total amount paid in the form of expenditure / liabilites
df_4 = df.loc[df['amount'] < 0]
print('Total amount paid in the form of expenditure/liabilites: ', df_4.sum())

# Amount paid for the main source of expenditure 
df_3 = df.loc[df['categoria'] == 'PAGAMENTO FORNITORI', 'amount']
print('Amount paid for the main source of expenditure: ', df_3.sum())

# Expenditure on Salaries
print(' Expenditure on Salaries: ', df.loc[df['categoria'] == 'STIPENDI', 'amount'].sum())

# Debt to income ratio
print('Debt to Income Ratio:', abs(df_4.sum()/ df_receipts.sum()))

# Date when the second highest amount received 
print('Date when the second highest amount received: ', df.loc[df['categoria'] == 'EROGAZIONE FINANZIAMENTO', 'data '])

# Analysing the XML file 

# Reading the XML file and converting it into a Pandas Dataframe
xml_database_1=pdx.read_xml('/content/sample_data/bilancio_test - Copy.xml')

# Flattening the Pandas Dataframe
xml_database_1=xml_database_1.pipe(flatten)
xml_database_2=xml_database_1.pipe(flatten)
xml_database_3=xml_database_2.pipe(flatten)

# Converting the select columns as keys and values to convert into a dictionary

xml_3_dict_values=[]
for i in xml_database_3.iloc[:,2:].values:
    for j in i:
        xml_3_dict_values.append(j)

xml_3_dict_values


xml_3_dict_keys=[]

xml_database_3.columns[2:].tolist()  # converting index data type to list

for i in xml_database_3.columns[2:]:
    xml_3_dict_keys.append(i)

xml_3_dict_keys


# making a dictionary
xml_3_dict=dict(zip(xml_3_dict_keys,xml_3_dict_values))
print(xml_3_dict)

# Converting the dictionary into a Pandas DataFrame
xml_3_dict_df = pd.DataFrame.from_dict(xml_3_dict, orient='index')
xml_3_dict_df.info()
xml_3_dict_df

# Dropping the columns with negligible impact on the data
xml_3_dict_df.drop(columns=['@decimals','@nazione'], inplace=True)

# converting the datatype to string
xml_3_dict_df = xml_3_dict_df.astype({'@contextref':'string','@unitref':'string', '#text':'string'})

# Checking categorical values of true and false in the dataframe text column
print(xml_3_dict_df.loc[xml_3_dict_df['#text']=='false'])
print(xml_3_dict_df.loc[xml_3_dict_df['#text']=='true'])

# Dropping true and false related rows
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text']=='false'].index, inplace = True)
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text']=='true'].index, inplace = True)

# Checking the values with amount zero in the text column
xml_3_dict_df.loc[xml_3_dict_df['#text']=='0']

# Dropping irrelevant columns 
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text']=='0'].index, inplace = True)
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "620100 Produzione di software non connesso all'edizione"].index, inplace = True)
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "00000000000"].index, inplace = True)
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "0000000"].index, inplace = True)
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "AZIENDA ABC"].index, inplace = True) # Personal data
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "VIA ROMA 111"].index, inplace = True) # head office data
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "Cuneo"].index, inplace = True) # Personal Data Code
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "SOCIETA' A RESPONSABILITA' LIMITATA"].index, inplace = True)
xml_3_dict_df.drop(xml_3_dict_df[xml_3_dict_df['#text'] == "<NA>"].index, inplace = True)

# Dropping null values
xml_3_dict_df.dropna(inplace=True)

# Converting the data type of text column containing values to integer

xml_3_dict_df["#text"]= (xml_3_dict_df["#text"]).astype(int)

# Checking the data quality of the final dataframe
# data size
print(xml_3_dict_df.shape) 
# random samples
print(xml_3_dict_df.sample(5))
# null values, datatype
xml_3_dict_df.info()

xml_3_dict_df[:4]
# patrimonionettoutileperditaesercizio - shareholders' equity profit loss year
# utileperditaesercizio - profit loss exercise
# differenzavalorecostiproduzione - production cost difference
# risultatoprimaimposte - result before tax

xml_3_dict_df
# A/I - Assets/Income  L/E - Liabilities/Expenditure  C - Capital

# patrimonionettoutileperditaesercizio - shareholders' equity profit loss year - 94264 Loss /E
# utileperditaesercizio - profit loss exercise -94264 Loss /E
# differenzavalorecostiproduzione - production cost difference -94264 Loss /E
# risultatoprimaimposte - result before tax -94264 Loss /E




#totalecreditiversosociversamentiancoradovuti -33 total receivables from shareholders payments still due A
#patrimonionettocapitale -209 capital equity C
#valoreproduzionealtriricaviproventialtri -260 production value other revenue other income I
#costiproduzioneoneridiversigestione -939 production costs sundry management charges E
#attivorateirisconti -1765 active accruals and prepayments  A
#totaleimmobilizzazionimateriali -2765 total tangible fixed assets A
#totalerimanenze -3000 total inventories A 
#valoreproduzionevariazionirimanenzeprodotticorsolavorazionesemilavoratifiniti -3000 production value changes in inventories products processing progress semi-finished products A 
#valoreproduzionevariazionirimanenzeprodotticorsolavorazionesemilavoratifinitilavoricorsoordi	-3000 production value changes in inventories finished semi-finished products A
 
#valoreproduzionealtriricaviproventicontributicontoesercizio  -4000 value production other revenue income grants operating account I
#valoreproduzionealtriricaviproventitotalealtriricaviproventi -4260 value production other revenues income total other revenues income  I
# patrimonionettoaltreriservedistintamenteindicatetotalealtreriserve -50000 equity other reserves indicated separately total other reserves A
#totaledisponibilitaliquide -54891 total liquidity available I
#totaleimmobilizzazioniimmateriali -74819 total intangible assets A
#costiproduzionematerieprimesussidiarieconsumomerci -75461 costs of production of ancillary raw materials and consumption of goods A
#totaleimmobilizzazioni -77584 Total fixed assets A
#totalepatrimonionetto -85927 total equity A
#totalecrediti -87895 total receivables I
#creditiesigibilientroeserciziosuccessivo -87895 receivables due within the following year I
#valoreproduzionericavivenditeprestazioni -111055 value production revenues sales services I
#totalevaloreproduzione -118315 total value of production A 
#patrimonionettoriservasoprapprezzoazioni -129982 shareholders' equity share premium reserve L
#costiproduzioneservizi -136179 production costs services E
#totaledebiti -139241 total debts L
#debitiesigibilientroeserciziosuccessivo -139241 payables due within the following year L
#totaleattivocircolante -145786 total current assets A
#totalecostiproduzione -212579 total production costs E
#totaleattivo -22516800 total assets A
#totalepassivo -225168 total liabilities L
#datianagraficicapitalesociale -213 share capital data A

# Visualising the cleaned dataframe
xml_3_dict_df['@contextref'].value_counts().plot(kind='pie', autopct="%.2f")

xml_3_dict_df['@unitref'].value_counts().plot(kind='bar')